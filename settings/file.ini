#?ini charset="utf-8"?
# eZ Publish configuration file for file handling
#
# NOTE: It is not recommended to edit this files directly, instead
#       a file in override should be created for setting the
#       values that is required for your site. Either create
#       a file called settings/override/file.ini.append or
#       settings/override/file.ini.append.php for more security
#       in non-virtualhost modes (the .php file may already be present
#       and can be used for this purpose).

[BinaryFileSettings]
Handler=eZFilePassthroughHandler
#Repositories[]=kernel/classes
#A list of extensions which have binaryhandlers
#It's common to create a settings/file.ini.append.php file
#in your extension and add the extension name to automatically
#get handlers from the extension when it's turned on.
#Handlers need to be placed in the extension subdir "binaryhandlers".
#ExtensionRepositories[]

[FileSettings]
# (UNIX only) Whether to check if the user executing an eZScript is the same
# as defined in the SystemUser setting. When the users don't match, the
# script execution will be stopped.
SystemUserCheck=disabled
RequiredSystemUser=www-data

Handlers[]
# Generic gzip handler, uses the zlib or shell handlers to do the job
Handlers[gzip]=ezgzipcompressionhandler
# Specific gzip handler, either using the zlib extension or gzip shell command
Handlers[gzipzlib]=ezgzipzlibcompressionhandler
Handlers[gzipshell]=ezgzipshellcompressionhandler

# The file extension blacklist is used to validate uploaded files.
# File types on the blacklist are rejected, for security or other reasons.
FileExtensionBlackList[]
FileExtensionBlackList[]=php
FileExtensionBlackList[]=php3
FileExtensionBlackList[]=phar
FileExtensionBlackList[]=phpt
FileExtensionBlackList[]=pht
FileExtensionBlackList[]=phtml
FileExtensionBlackList[]=pgif

[ClusteringSettings]
# Cluster file handler.
# Since 4.1 name of the filehandlers have changed
# you may choose between :
# - eZFSFileHandler
#   standard file handler
# - eZDFSFileHandler
#   distributed filesystem handler with a DB overlay. Required for NFS based
#   architectures
# and it is case sensitive
FileHandler=eZFSFileHandler

# DEPRECATED
# If you want to use your own cluster file handler located in an extension
# then you should add the extension name to the list below.
# In that case the handler will be searched for in the following directory:
# extension/<your_extension>/clusterfilehandlers
# ExtensionDirectories[]

# Defines what happens when a requested cache file is already being generated
# and no expired cache file exists (for instance if the content is new)
# Two possible values:
#   - wait: places the process in a wait loop for a limited time until the file
#           is done generating. This is the default value
#   - generate: let the requesting process generate its own data without storing
#               the result
# The key of this array defined the type of cache impacted by the setting. Three
# cache types are allowed here: viewcache, cacheblock and misc (any cache that is
# not viewcache nor cacheblock).
NonExistantStaleCacheHandling[]
NonExistantStaleCacheHandling[viewcache]=wait
NonExistantStaleCacheHandling[cacheblock]=wait
NonExistantStaleCacheHandling[misc]=wait

# DFS Cluster Handler settings
[eZDFSClusteringSettings]
# Path to the NFS mount point
# Can be relative to the eZ publish root, or absolute
MountPointPath=
# Database backend
# Available options:
# - MySQLi: eZDFSFileHandlerMySQLiBackend
# - PostgreSQL: eZDFSFileHandlerPostgresqlBackend
# - Oracle: eZDFSFileHandlerOracleBackend (requires the ezoracle extension)
DBBackend=eZDFSFileHandlerMySQLiBackend
DFSBackend=eZDFSFileHandlerDFSBackend
DBHost=dbhost
DBPort=3306
DBSocket=
DBName=cluster
DBUser=root
DBPassword=
DBConnectRetries=3
DBExecuteRetries=20
# Max number of times a dfs file is tried to be copied.
# Increase this value if you find files like expiryXYZtmp.php with 0 byte size
MaxCopyRetries=5

# Optional DB table name caches should be stored to
# This is useful for staging use cases where the storage entries and DB are shared
# across different eZ Publish installations, but the caches should not.
# MetaDataTableNameCache=

[PassThroughSettings]
# The default value for mime types not specified using ContentDisposition
# is "attachment". Possible values are attachment or inline.
DefaultContentDisposition=attachment
ContentDisposition[application/x-shockwave-flash]=inline
ContentDisposition[video/ogg]=inline
ContentDisposition[video/mp4]=inline
ContentDisposition[video/webm]=inline

[ClusterEventsSettings]
# Enables/Disables dedicated cluster events listening
# If enabled, the cluster file handler will use a dedicated listener object
# to respond to cluster events.
# Can be used to add a cache layer (e.g. Memcached or Redis) in the cluster backend
# and thus reduce cluster database load.
# Only supported by eZDFSFileHandler MySQLi backend at the moment.
ClusterEvents=disabled
# Class to use as cluster events listener
# This class must implement eZClusterEventListener interface
Listener=

